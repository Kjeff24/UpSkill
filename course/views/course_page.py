from django.shortcuts import render
from django.http import JsonResponse 
from course.models import Course, Participants
from event.models import Event

from django.http import HttpResponse

# Course page for employees
def coursePage(request, pk):
    """
    Render the course page for employees.

    This view function retrieves the necessary data to display the course page for a specific course. It fetches the 
    course resources, announcements, and rooms based on the provided primary key (pk). The function also retrieves 
    the list of courses in which the employee is a participant.

    Parameters:
    - request: The HTTP request object generated by the user's interaction with the web application.
    - pk: The primary key of the course being accessed.

    Returns:
    - The function renders the course page template with the necessary context data.

    """
    
    # Get course by id and display resources, announcements, rooms based on the course
    if request.user.is_authenticated:
        employee = request.user
        
        participants = Participants.objects.filter(user=employee)
        courses = [participant.course for participant in participants]
        
        course = Course.objects.get(pk=pk)
        
        context = {
            'course':course, 
            'courses':courses,
            'page': 'course_overview',
            }

        return render(request, "page/course_page.html", context)
    else:
        return HttpResponse("Login Required")

# show all events in course page
def all_events(request, pk): 
    """
    Return JSON response with all events associated with a course.

    This view function retrieves all events associated with a specific course and returns a JSON response 
    containing information about each event. The response includes the event title, id, start date and time, and 
    end date and time.

    Parameters:
    - request: The HTTP request object generated by the user's interaction with the web application.
    - pk: The primary key of the course for which events are being fetched.

    Returns:
    - A JSON response containing information about all events associated with the course.

    """
    
    course = Course.objects.get(pk=pk)                                                                                                
    all_events = Event.objects.filter(course=course)                                                                                    
    out = []                                                                                                             
    for event in all_events:                                                                                             
        out.append({                                                                                                     
            'title': event.name,                                                                                         
            'id': event.id,                                                                                              
            'start': event.start.isoformat(),                                                        
            'end': event.end.isoformat(),                                                           
        })                                                                                                               
                                                                                                                      
    return JsonResponse(out, safe=False) 